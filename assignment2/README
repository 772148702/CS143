user: songhan
user: xuany

README file for Programming Assignment 2 (C++ edition)
======================================================

Your directory should now contain the following files:

 Makefile		  -> [course dir]/src/PA2/Makefile
 README
 cool.y
 bad.cl
 good.cl
 cool-tree.handcode.h
 cool-tree.cc		  -> [course dir]/src/PA2/cool-tree.cc
 cool-tree.aps		  -> [course dir]/src/PA2/cool-tree.aps
 dumptype.cc		  -> [course dir]/src/PA2/dumptype.cc
 handle_flags.c           -> [course dir]/src/PA2/handle_flags.cc
 parser-phase.cc	  -> [course dir]/src/PA2/parser-phase.cc
 stringtab.cc		  -> [course dir]/src/PA2/stringtab.cc
 tokens-lex.cc		  -> [course dir]/src/PA2/tokens-lex.cc
 tree.cc		  -> [course dir]/src/PA2/tree.cc
 utilities.cc		  -> [course dir]/src/PA2/utilities.cc
 *.d			  dependency files
 *.*			  other generated files

The include (.h) files for this assignment can be found in 
[course dir]/include/PA2

	The Makefile contains targets for compiling and running your
	program. DO NOT MODIFY.
    
	The README contains this info. Part of the assignment is to
	fill in the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and why
	your test cases are adequate. It is part of the assignment to
	clearly and concisely explain things in text as well as to comment
	your code. Just edit this file.

	cool.y is the skeleton for the parser specification that you
	are to write. It already contains productions for the program
	and the classes. Use them as an example to write the remaining
	productions.  You should also read the bison documentation.
	This skeleton will compile and run as is, but it doesn't
	do much.

	good.cl, bad.cl test a few features of the grammar. You should
	add tests to ensure that good.cl exercises every legal
	construction of the grammar and that bad.cl exercises as many
	different parsing errors as you can squeeze into one file.

	cool-tree.aps contains the definitions for the tree language
	which you use to construct the abstract syntax tree (AST).
	From this file, cool-tree.h and cool-tree.cc are automatically 
        generated by a utility that compiles the specification into
        C++ functions for producing and consuming the tree nodes.
        This file is provided for your reference.  DO NOT MODIFY.

        tree.{cc|h} contain definitions used by the tree package.
        cool-tree.handcode.h is the handwritten extension to
        cool-tree.h.  If you read cool-tree.h and cool-tree.cc, you will
        note that there are "hooks" for extending the classes
        declarations.  Extending and modifying the tree package is
        discussed in the "Cool Tour", but you do not need to (and should
        not) modify the tree package for this assignment.

	tokens-lex.cc is a lexer capable of reading a token stream from
	console in the format produced by the lexer phase. DO NOT
	MODIFY.

        parser-phase.cc contains a driver to test the parser. DO NOT
        MODIFY.

	dumptype.cc prints the AST out in a form readable by the
	semant phase of the compiler. DO NOT MODIFY.

	handle_flags.cc implements routines for parsing command line
        flags. DO NOT MODIFY.

        The rest of the files are created as byproducts of `bison'.
        `cool-parse.cc' is the generated C++ file containing the
        parser.

	Files not discussed are covered in the README for PA2.

Instructions
------------

	To compile your parser program type:

	% make parser

	This produces an executable named "parser" which is standalone
	phase of the Cool compiler.  It requires lexer, semant, and cgen
	to do anything useful.

	To run your parser on the files good.cl and bad.cl type:

	% make dotest

	To run the (provided) lexer and your parser on a file called test.cl type:

	% ./lexer test.cl | ./parser

	If you think your parser is correct and behaves like
	the one we wrote, you may want to run a COOL compiler using
	your parser:

	% ./mycoolc foo.cl

	To overwrite the default lexical analyzer with yours, replace 
	lexer (which is a symbolic link to the "official" lexer) with
        your lexer from PA2.

	To turnin your work type:

	% make submit

	Running "submit" will collect the files cool.y, good.cl, bad.cl,
	good.output, bad.output, and README. Don't forget to edit the
	README file to include your write-up, and to write your own test
	cases in good.cl and bad.cl.

 	You may turn in the assignment as many times as you like.
	However, only the last version will be retained for
	grading.

	If you change architectures you must issue

	% make clean

	when you switch from one type of machine to the other.
	If at some point you get weird errors from the linker,	
	you probably forgot this step.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA2
----------------
************************************************************************
                       1 Overal Structure
************************************************************************

parser consumes the output of lexers and does the syntactic analysis. Our 
parser is based on Bison. The main analysis flow is as following. The 
parsing status starts from program. A program is composed of several classes,
where each class may have one or more features. There are two types of features,
attribute and method. The term expression is used as sub-elements for these 
two types. Expressions have several different forms as listed in Figure 1 in
Cool Manual. We implemented the whole Cool syntax in cool.y. The
specifications are described as below. 

************************************************************************
                      2 Implementation AST
************************************************************************

------------------------------------------------------------------------
                             2.1 Type	
------------------------------------------------------------------------
We complete all types of all non-terminals, e.g. class, feature, formal, 
expression, case. List is special, because it is a sequence of non-terminals,
which is very useful to construct parse tree, such as class_list, feature_list,
formal_list, etc. We construct list using recursive method as below.

   /* Feature list may be empty, but no empty features in list. */
    feature_list : /* empty */
	{ $$ = nil_Features(); }
	| feature
	{ $$ = single_Features($1); }
	| feature_list feature
	{ $$ = append_Features($1, single_Features($2));}
	;	

And because formal_list cannot be empty, so we also construct a optional_formal_list
than can be empty. And for expression, we construct a expression_list for 
dispatch and static dispatch, and a multi_expression, which is also a expression 
list, but use for block of expressions.
Because method and attribute all belong to feature, so they all have
the type feature.

------------------------------------------------------------------------
                              2.2 lets
------------------------------------------------------------------------
Lets can be regard as a complicated kind of expression.  Becasue it can 
have optional assign expression and also can be nested, we used a recursive
method to implement it. 
The actual codes are as below:
 	lets : LET OBJECTID ':' TYPEID IN expression
     { $$ = let($2, $4, no_expr(), $6); }	
     | LET OBJECTID ':' TYPEID ASSIGN expression IN expression
     { $$ = let($2, $4, $6, $8); }
     | LET OBJECTID ':' TYPEID lets 
     { $$ = let($2, $4, no_expr(), $5); }
     | LET OBJECTID ':' TYPEID ASSIGN expression lets
     { $$ = let($2, $4, $6, $7);}
     | ',' OBJECTID ':' TYPEID IN expression
     { $$ = let($2, $4, no_expr(), $6); }
     | ',' OBJECTID ':' TYPEID ASSIGN expression IN expression
     { $$ = let($2, $4, $6, $8); }	 
	 | ',' OBJECTID ':' TYPEID lets
	 { $$ = let($2, $4, no_expr(), $5); }
	 | ',' OBJECTID ':' TYPEID ASSIGN expression lets
	 { $$ = let($2, $4, $6, $7); }	
------------------------------------------------------------------------
                              2.3 precedence
------------------------------------------------------------------------							 
According to the cool manul, the precedence of infix binary and prefix unary
operations, from highest to lowest, is given by:
. 
@ 
~
isvoid
* /
+ -
<= <  =
not
<-  
These operations are all left associative, but for assign, it
is right associative, and its precedence is lowest. Also we cannot have 
more than 1 '<' '<=' '=' in a row, therefore the code from precedence 
declarations are as below:
	%right ASSIGN
	%left NOT
	%nonassoc '<' '=' LE
	%left '+' '-'
    %left '*' '/'
	%left ISVOID
	%left '~'
	%left '@'
	%left '.'
	
***************************************************************************
                            3 Error Handling
***************************************************************************
We did error handling in class, feature, case, let expression, if-else 
condition. The basic idea is finding the border for each cases:
In class, we handle the error by recovering from { or ;
In features, we handle the error by recovering from ;
In case, we handle the error by recovering from ESAC
In let expression, the error handling is a bit complecated. There are many 
keyword terminals, we recover by coming across the terminal that directly 
follows the error. If-else condition is handled similarly.
In multiple expressions, we handle the error by recovering from ;

***************************************************************************
                                4 Test
***************************************************************************
First, we generated good.cl which contains all legal grammars to test each 
production unit, e.g. class, class_list,feature, feature_list, etc. By comparing
output and error message of our parser with the reference parser, we can test
the functional correctness of our design. 

In order to apply more test to our parser and expose it to the real Cool code,
we ran it against all the Cool source code in examples folder, as well as those 
test cases provided for PA1.

To test whether our error handling can work correctly, we wrote bad.cl which
contains some invalid Cool codes, e.g. add errors in class declaration and following 
class definition, multiple errors inside a block and immediately after the block. 
We found our parser can produce error messages and also recover smoothly after error
found.

  								
